// Base URL for your Cloudflare R2 bucket's map directory
const cloudBase = "https://pub-99fe58b07618413daf5b1618f0046cec.r2.dev/map/";

// Function to fetch JSON data from a given URL
async function fetchJSON(url) {
try {
	const response = await fetch(url);
	if (!response.ok) {
	throw new Error(`Failed to fetch ${url}`);
	}
	return await response.json();
} catch (error) {
	console.error(`Error fetching JSON from ${url}:`, error);
	throw error;
}
}

// Initialize the map
async function initializeMap() {
try {
	// Load the JSON file generated by your Python script.
	const data = await fetchJSON(`${cloudBase}tiles_bounds.json`);
	console.log("Loaded JSON:", data);

	const { minX, maxX, minY, maxY, tileWidth, tileHeight, tiles } = data;

	// Compute grid dimensions from the bounding box.
	const worldColumns = maxX - minX + 1;
	const worldRows = maxY - minY + 1;
	const worldWidth = worldColumns * tileWidth;
	const worldHeight = worldRows * tileHeight;
	console.log("World dimensions (px):", worldWidth, "x", worldHeight);

	// Define map bounds (in pixel space) before any transformation.
	const mapBounds = [[0, 0], [worldHeight, worldWidth]];
	console.log("Map bounds:", mapBounds);

	// Initialize the map using the default L.CRS.Simple.
	const map = L.map('map', {
	crs: L.CRS.Simple,
	center: [worldHeight / 2, worldWidth / 2],
	zoom: 0,
	minZoom: -2,
	maxZoom: 4,
	maxBounds: mapBounds,
	noWrap: true
	});
	map.fitBounds(mapBounds);
	console.log("Map center:", map.getCenter(), "Zoom:", map.getZoom());

	// Compute vertical grid index by flipping:
	const worldRowsCount = worldRows;
	tiles.forEach(tile => {
	const { x: fileX, y: fileY } = tile;
	const gridX = fileX - minX;
	const gridY_standard = fileY - minY;
	const gridY_TMS = (worldRowsCount - 1) - gridY_standard;

	// Compute overlay bounds:
	const topLeft = [gridY_TMS * tileHeight, gridX * tileWidth];
	const bottomRight = [(gridY_TMS + 1) * tileHeight, (gridX + 1) * tileWidth];
	const overlayBounds = [topLeft, bottomRight];

	const url = `${cloudBase}${fileX},${fileY}.png`;
	console.log("Adding tile", `${fileX},${fileY}`, "with bounds", overlayBounds, "URL:", url);

	// Add the image overlay to the map
	L.imageOverlay(url, overlayBounds).addTo(map);
	});
} catch (error) {
	console.error("Error initializing map:", error);
}
}

// Initialize the map when the DOM is fully loaded
document.addEventListener('DOMContentLoaded', initializeMap);
